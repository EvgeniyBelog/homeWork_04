1) Какие бывают алгоритмы сортировок ?

Существуют десятки алгоритмов сортировки, самые популярные это:

1. Пузырьковая сортировка. Один из самых известных алгоритмов сортировки. Его суть в последовательном сравнении значений двух соседних элементов слева направо: если предыдущее больше последующего, они меняются местами. Сложность O(n^2).
2. Шейкерная или сортировка перемешиванием. Двунаправленный, оптимизированный вариант сортировки пузырьком. Сложность O(n^2).
3. Сортировка расчёской. Модификация сортировки пузырьком, в которой расстояние между сравниваемыми парами значений отлично от 1. Сложность O(n^2).
4. Сортировка вставками. Каждый новый поступивший элемент размещается в подходящее место среди ранее упорядоченных элементов. Сложность O(n^2).
5. Сортировка выбором. Делит входной массив на упорядоченную и неупорядоченную части. Затем последовательно переносит в первую часть наименьшие элементы из второй. Сложность O(n^2).
6. Быстрая сортировка. Выбирается опорный элемент. Элементы меньше этого опорного элемента перемещаются влево от него, а большие либо равные, вправо. Далее алгоритм рекурсивно применяется к каждой из частей. Сложность O(n^2).
Так же существуют: Гномья сортировка, Сортировка слиянием, Сортировка с помощью двоичного дерева, Сортировка Timsort, Сортировка Шелла, Пирамидальная сортировка (или сортировка кучи), Плавная сортировка и т.д.


3) Создать объект Person несколькими способами, после создать объект Person2, чтобы в нём были доступны методы объекта Person. Добавить метод logInfo чтоб он был доступен всем объектам.

const person = {
  name: "Vasya",
  phone: 12345
}

const person = new Object({
  name: "Vasya",
  phone: 12345
})

class Person {
  constructor(name, phone) {
    this.name = name;
    this.phone = phone;
  }
}
const person = new Person('Vasya', 12345);

const person2 = Object.create(person, {
  name: {value: "Petya", enumerable: true, writable: true, configurable: true},
  phone: {value: 54321, enumerable: true, writable: true, configurable: true},
})

const person2 = {
  name: "Petya",
  phone: 54321,
  __proto__: person,
}

Object.prototype.logInfo = function() {
  console.log(`Name: ${this.name} phone: ${this.phone}`)
}
